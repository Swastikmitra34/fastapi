# Function to compute the Lagrange basis polynomials and interpolate
lagrange_interpolation <- function(x_values, y_values, x_query) {
  n <- length(x_values)
  if (length(y_values) != n) {
    stop("Length of x_values and y_values must be the same.")
  }
  # Initialize the result to 0
  result <- 0
  # Loop through each data point
  for (i in 1:n) {
    # Compute the Lagrange basis polynomial L_i(x)
    L_i <- 1
    for (j in 1:n) {
      if (j != i) {
        L_i <- L_i * (x_query - x_values[j]) / (x_values[i] - x_values[j])
      }
    }
    # Add the contribution of y[i] * L_i(x) to the result
    result <- result + y_values[i] * L_i
  }
  return(result)
}
# Example usage:
x_values <- c(1, 2, 3)
y_values <- c(1, 4, 9)  # f(x) = x^2
x_query <- 2.5  # Interpolate at x = 2.5
# Perform interpolation
interpolated_value <- lagrange_interpolation(x_values, y_values, x_query)
cat("Interpolated value at x =", x_query, "is", interpolated_value, "\n")
q()
q()
# Example life table (simplified)
# l_x = number of survivors at age x
life_table <- c(100000, 99500, 99000, 98500, 98000, 97500, 97000, 96500)
# Function to calculate life expectancy based on a life table
life_expectancy <- function(life_table, age) {
  lx <- life_table[age + 1]  # survivors at the given age
  lx_future <- life_table[(age + 1):length(life_table)]  # survivors at future ages
  # Calculate life expectancy using the simplified model
  e_x <- sum(lx_future / lx)
  return(e_x)
}
# Calculate life expectancy for someone at age 2
age <- 2
expectancy <- life_expectancy(life_table, age)
cat("The life expectancy at age", age, "is:", round(expectancy, 2), "years\n")
q()
# Load necessary libraries
library(tidyverse)
library(caret)
library(randomForest)
# Load the dataset
file_path <- "Life Expectancy Data.csv"
data <- read.csv(file_path)
# Clean column names
colnames(data) <- str_trim(colnames(data))
# Separate features and target variable
target <- "Life.expectancy"
predictors <- setdiff(names(data), c(target, "Country"))
# Handle missing values
data <- data %>%
  mutate(across(where(is.numeric), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .))) %>%
  mutate(across(where(is.factor), ~ ifelse(is.na(.), Mode(.), .)))
# Split the data into training and testing sets
set.seed(42)
train_index <- createDataPartition(data[[target]], p = 0.8, list = FALSE)
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
# Train a Random Forest model
rf_model <- randomForest(
  as.formula(paste(target, "~ .")),
  data = train_data[, c(predictors, target)],
  ntree = 100,
  importance = TRUE
)
# Evaluate the model
predictions <- predict(rf_model, newdata = test_data[, predictors])
mae <- mean(abs(predictions - test_data[[target]]))
r_squared <- cor(predictions, test_data[[target]])^2
cat("Mean Absolute Error:", round(mae, 2), "\n")
cat("R-squared:", round(r_squared, 2), "\n")
# Function to predict life expectancy based on user input
predict_life_expectancy <- function(model, predictors) {
  user_input <- list()
  for (col in predictors) {
    if (is.numeric(data[[col]])) {
      value <- as.numeric(readline(prompt = paste("Enter your value for", col, ": ")))
    } else {
      options <- unique(data[[col]])
      value <- readline(prompt = paste("Enter your value for", col, " (options:", paste(options, collapse = ", "), "): "))
    }
    user_input[[col]] <- value
  }
  # Convert user input to a data frame
  user_df <- as.data.frame(user_input, stringsAsFactors = FALSE)
  # Predict life expectancy
  predicted_value <- predict(model, newdata = user_df)
  cat("Your predicted life expectancy is:", round(predicted_value, 2), "years\n")
}
# Call the function
predict_life_expectancy(rf_model, predictors)
q()
q()
